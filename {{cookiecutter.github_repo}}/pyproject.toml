[tool.poetry]
name = "{{cookiecutter.package_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_short_description}}"
license = "MIT"
authors = ["{{cookiecutter.full_name}} <{{cookiecutter.email}}>"]
readme = "README.md"
homepage = "https://pypi.org/project/{{cookiecutter.package_name}}"
documentation = "https://{{cookiecutter.github_username}}.github.io/{{cookiecutter.github_repo}}/"
repository = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.github_repo}}"
keywords = []
classifiers = [
    # update this list to match your application: https://pypi.org/pypi?%3Aaction=list_classifiers
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: {{cookiecutter.python_major_version}}",
    "Programming Language :: Python :: {{cookiecutter.python_major_version}}.{{cookiecutter.python_minor_version}}",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "~{{cookiecutter.python_major_version}}.{{cookiecutter.python_minor_version}},<3.12"

[tool.poetry.dev-dependencies]
black = "22.3.0"             # The uncompromising code formatter.
isort = "5.9.3"              #A Python utility / library to sort Python imports.
ruff = "^0.0.264"
mypy = "*"
types-setuptools = "^67.7.0"

# Unit Testing
pytest = "^7"                                   # pytest: simple powerful testing with Python
pytest-cov = "^4"                               # Pytest plugin for measuring coverage.
pytest-mock = "^3"
xdoctest = "^0.15.0"                            # A rewrite of the builtin doctest module
coverage = { version = "*", extras = ["toml"] }

# Documentation
mkdocs = { extras = ["markdown-include"], version = "^1.4.3" }
mkdocstrings = { extras = ["python"], version = "^0.21.2" }
mkdocs-material = "^9.1.9"
mkdocs-include-markdown-plugin = "^4.0.4"


[tool.black]
# see https://black.readthedocs.io/en/stable/
line_length = {{cookiecutter.max_code_line_length}}
target-version = ["py{{cookiecutter.python_major_version}}{{cookiecutter.python_minor_version}}"]
skip-string-normalization = true

[tool.isort]
# see https://timothycrosley.github.io/isort/
line_length = {{cookiecutter.max_code_line_length}}
combine_as_imports = true
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
force_grid_wrap = 0
ensure_newline_before_comments = true

[tool.coverage.paths]
source = ["{{cookiecutter.package_name}}"]

[tool.coverage.run]
# see https://coverage.readthedocs.io/en/coverage-5.0.3/config.html
branch = true
data_file = ".cache/coverage"
source = ["{{cookiecutter.package_name}}"]
omit = ["tests/*", ".venv/*", "*/__main__.py"]

[tool.coverage.report]
# see https://coverage.readthedocs.io/en/coverage-5.0.3/config.html
exclude_lines = ["pragma: no cover", "raise NotImplementedError"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--strict-markers --pdbcls=tests:Debugger -r sxX --cov={{cookiecutter.package_name}} --cov-report=html --cov-report=term-missing:skip-covered"
cache_dir = ".cache"

[tool.ruff]
cache-dir = ".cache/ruff"
line-length = {{cookiecutter.max_code_line_length}}

[tool.mypy]
cache_dir = ".cache/mypy/"
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[build-system]
requires = ["poetry>=1.1.12"]
build-backend = "poetry.masonry.api"

# Exqmple
#[tool.poetry.scripts]
#rascal = "{{cookiecutter.package_name}}.cli:main"
