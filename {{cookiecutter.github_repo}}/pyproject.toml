[tool.poetry]
name = "{{cookiecutter.package_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_short_description}}"
license = "MIT"
authors = ["{{cookiecutter.full_name}} <{{cookiecutter.email}}>"]
readme = "README.md"
homepage = "https://pypi.org/project/{{cookiecutter.package_name}}"
documentation = "https://{{cookiecutter.github_username}}.github.io/{{cookiecutter.github_repo}}/"
repository = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.github_repo}}"
keywords = []
classifiers = [
    # update this list to match your application: https://pypi.org/pypi?%3Aaction=list_classifiers
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: {{cookiecutter.python_major_version}}",
    "Programming Language :: Python :: {{cookiecutter.python_major_version}}.{{cookiecutter.python_minor_version}}",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
{% if cookiecutter.use_package_mode == "Enabled" -%}
packages = [{include = "{{cookiecutter.package_name}}"}]
{% endif %}
{% if cookiecutter.use_package_mode == "Disabled" -%}
package-mode = false
{% endif %}


[tool.poetry.dependencies]
python = ">={{cookiecutter.python_major_version}}.{{cookiecutter.python_minor_version}},<4"

[tool.poetry.group.dev.dependencies]
black = "24.4.2"             # The uncompromising code formatter.
isort = "5.13.2"              #A Python utility / library to sort Python imports.
ruff = "^0.5.5"
pyright = "^1.1.354"

# Unit Testing
pytest = "^8"                                   # pytest: simple powerful testing with Python
pytest-cov = "^5"                               # Pytest plugin for measuring coverage.
pytest-mock = "^3"
xdoctest = "^1.1.5"                            # A rewrite of the builtin doctest module
coverage = { version = "*", extras = ["toml"] }

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = { extras = ["markdown-include"], version = "^1.5.3" }
mkdocstrings = { extras = ["python"], version = "^0.25.2" }
mkdocs-material = "^9.5.18"
mkdocs-include-markdown-plugin = "^6.2.1"


[tool.black]
# see https://black.readthedocs.io/en/stable/
line_length = {{cookiecutter.max_code_line_length}}
target-version = ["py{{cookiecutter.python_major_version}}{{cookiecutter.python_minor_version}}"]
skip-string-normalization = true

[tool.isort]
# see https://timothycrosley.github.io/isort/
line_length = {{cookiecutter.max_code_line_length}}
combine_as_imports = true
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
force_grid_wrap = 0
ensure_newline_before_comments = true

[tool.coverage.paths]
source = ["{{cookiecutter.package_name}}"]

[tool.coverage.run]
# see https://coverage.readthedocs.io/en/coverage-5.0.3/config.html
branch = true
data_file = ".cache/coverage"
source = ["{{cookiecutter.package_name}}"]
omit = ["tests/*", ".venv/*", "*/__main__.py"]

[tool.coverage.report]
# see https://coverage.readthedocs.io/en/coverage-5.0.3/config.html
exclude_lines = ["pragma: no cover", "raise NotImplementedError"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--strict-markers --pdbcls=tests:Debugger -r sxX --cov={{cookiecutter.package_name}} --cov-report=html --cov-report=term-missing:skip-covered"
cache_dir = ".cache"

[tool.ruff]
cache-dir = ".cache/ruff"
line-length = {{cookiecutter.max_code_line_length}}

[tool.pyright]
include = ["{{cookiecutter.package_name}}"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "{{cookiecutter.package_name}}/experimental",
    "{{cookiecutter.package_name}}/typestubs"
]
ignore = ["tests"]
defineConstant = { DEBUG = true }
reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "{{cookiecutter.python_major_version}}.{{cookiecutter.python_minor_version}}"
pythonPlatform = "Linux"


[tool.poe.tasks]
_isort = "poetry run isort {{cookiecutter.package_name}} tests"
_black = "poetry run black {{cookiecutter.package_name}} tests"
_ruff = "poetry run ruff check {{cookiecutter.package_name}}"
pyright = "poetry run pyright"
_build = "poetry build"
_publish = "poetry publish"
build.help = "Build module"
build.sequence = ["check", "test", "_build"]
publish.help = "Publish module"
publish.sequence = ["build", "_publish"]
check.help = "Run Linter and type checker"
check.sequence = ["_isort", "_black", "_ruff", "pyright"]


[tool.poe.tasks.test]
help = "Run unit tests"
shell = """
if test -e .cache/v/cache/lastfailed; then poetry run pytest tests --last-failed --exitfirst; fi &
rm -rf .cache/v/cache/lastfailed &
poetry run pytest
"""

[tool.poe.tasks.docs]
help = "Build site documentation"
shell  = """
git fetch origin gh-pages &
poetry run mkdocs build --clean
"""

[tool.poe.tasks.docs-publish]
help = "Publish site documentation"
cmd  = """
poetry run mkdocs gh-deploy  --clean 
"""

[tool.poe.tasks.clean]
help = "Remove all generated and temporary files"
shell  = """
rm -rf *.spec dist build .eggs *.egg-info .install .cache .coverage htmlcov .mypy_cache .pytest_cache site .ruff_cache &
find {{cookiecutter.package_name}} tests -type d -name '__pycache__' -exec rm -rf {} +
"""

[tool.poe.tasks.requirements]
help = "Generate requirements.txt"
cmd = "poetry export --without-hashes -f requirements.txt "
capture_stdout = "requirements.txt"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Scripts Example
#[tool.poetry.scripts]
#my-cli = "{{cookiecutter.package_name}}.cli:main"
